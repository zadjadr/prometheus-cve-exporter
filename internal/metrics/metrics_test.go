package metrics

import (
	"strings"
	"testing"

	"github.com/prometheus/client_golang/prometheus/testutil"
)

func TestUpdateVulnerablePackage(t *testing.T) {
	// Reset the gauge before testing
	ResetVulnerablePackagesGauge()

	UpdateVulnerablePackage("openssl", "1.1.1", "CVE-2023-1234", "HIGH", 1)

	expected := `
		# HELP nvd_vulnerable_packages Indicates if a package is vulnerable (1) or not (metric not present)
		# TYPE nvd_vulnerable_packages gauge
		nvd_vulnerable_packages{cve="CVE-2023-1234",impact="HIGH",package="openssl",version="1.1.1"} 1
	`

	if err := testutil.CollectAndCompare(vulnerablePackagesGauge, strings.NewReader(expected)); err != nil {
		t.Errorf("Unexpected metric value: %v", err)
	}
}

func TestSetTotalVulnerabilities(t *testing.T) {
	SetTotalVulnerabilities(5)

	expected := `
		# HELP nvd_total_vulnerabilities Total number of vulnerabilities detected
		# TYPE nvd_total_vulnerabilities gauge
		nvd_total_vulnerabilities 5
	`

	if err := testutil.CollectAndCompare(totalVulnerabilitiesGauge, strings.NewReader(expected)); err != nil {
		t.Errorf("Unexpected metric value: %v", err)
	}
}

func TestSetLastUpdateTime(t *testing.T) {
	SetLastUpdateTime()

	// We can't predict the exact value, so we'll just check if it's set
	if testutil.ToFloat64(lastUpdateTimeGauge) == 0 {
		t.Errorf("Expected last update time to be set, but it was 0")
	}
}

func TestResetVulnerablePackagesGauge(t *testing.T) {
	// First, set a value
	UpdateVulnerablePackage("openssl", "1.1.1", "CVE-2023-1234", "HIGH", 1)

	// Then reset
	ResetVulnerablePackagesGauge()

	// Check if the gauge is empty
	if testutil.CollectAndCount(vulnerablePackagesGauge) != 0 {
		t.Errorf("Expected vulnerable packages gauge to be empty after reset")
	}
}
