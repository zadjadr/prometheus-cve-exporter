package metrics

import (
	"github.com/prometheus/client_golang/prometheus"
)

var (
	vulnerablePackagesGauge = prometheus.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "nvd_vulnerable_packages",
			Help: "Indicates if a package is vulnerable (1) or not (metric not present)",
		},
		[]string{"package", "version", "cve", "impact"},
	)

	totalVulnerabilitiesGauge = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "nvd_total_vulnerabilities",
			Help: "Total number of vulnerabilities detected",
		},
	)

	lastUpdateTimeGauge = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "nvd_last_update_time",
			Help: "Timestamp of the last successful update",
		},
	)
)

// UpdateVulnerablePackage sets the gauge for a specific package.
func UpdateVulnerablePackage(pkg, version, cve, impact string, value float64) {
	vulnerablePackagesGauge.WithLabelValues(pkg, version, cve, impact).Set(value)
}

// SetTotalVulnerabilities sets the total vulnerabilities gauge.
func SetTotalVulnerabilities(value float64) {
	totalVulnerabilitiesGauge.Set(value)
}

// SetLastUpdateTime sets the last update time gauge to the current time.
func SetLastUpdateTime() {
	lastUpdateTimeGauge.SetToCurrentTime()
}

// ResetVulnerablePackagesGauge resets the vulnerablePackagesGauge
func ResetVulnerablePackagesGauge() {
	vulnerablePackagesGauge.Reset()
}

func init() {
	registry := prometheus.NewRegistry()
	registry.MustRegister(vulnerablePackagesGauge)
	registry.MustRegister(totalVulnerabilitiesGauge)
	registry.MustRegister(lastUpdateTimeGauge)

	// Replace the default registry
	prometheus.DefaultRegisterer = registry
	prometheus.DefaultGatherer = registry
}
