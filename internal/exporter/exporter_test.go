package exporter

import (
	"testing"

	"io.ki/prometheus-cve-exporter/internal/models"
)

func TestGetInstalledPackages(t *testing.T) {
	// This test might be challenging to implement without mocking the package manager commands
	// For now, we'll just check if the function runs without errors
	_, err := GetInstalledPackages()
	if err != nil {
		t.Fatalf("GetInstalledPackages() failed: %v", err)
	}
}

func TestIsVersionVulnerable(t *testing.T) {
	tests := []struct {
		name             string
		installedVersion string
		cpeMatch         models.CPEMatch
		expected         bool
	}{
		{
			name:             "Version within range",
			installedVersion: "1.2.3",
			cpeMatch: models.CPEMatch{
				VersionStartIncluding: "1.0.0",
				VersionEndExcluding:   "2.0.0",
			},
			expected: true,
		},
		{
			name:             "Version before range",
			installedVersion: "0.9.0",
			cpeMatch: models.CPEMatch{
				VersionStartIncluding: "1.0.0",
				VersionEndExcluding:   "2.0.0",
			},
			expected: false,
		},
		{
			name:             "Version after range",
			installedVersion: "2.1.0",
			cpeMatch: models.CPEMatch{
				VersionStartIncluding: "1.0.0",
				VersionEndExcluding:   "2.0.0",
			},
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := isVersionVulnerable(tt.installedVersion, tt.cpeMatch)
			if result != tt.expected {
				t.Errorf("isVersionVulnerable() = %v, want %v", result, tt.expected)
			}
		})
	}
}

func TestCheckConfigurationNode(t *testing.T) {
	packages := map[string]string{
		"openssl": "1.1.1",
	}

	node := models.Node{
		CPEMatch: []models.CPEMatch{
			{
				Vulnerable:            true,
				CPE23Uri:              "cpe:2.3:a:openssl:openssl:1.1.1:*:*:*:*:*:*:*",
				VersionStartIncluding: "1.1.0",
				VersionEndExcluding:   "1.1.2",
			},
		},
	}

	count := checkConfigurationNode(packages, "CVE-2023-1234", "HIGH", []models.Node{node})

	if count != 1 {
		t.Errorf("Expected 1 vulnerable package, got %d", count)
	}
}
