package exporter

import (
	"compress/gzip"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"time"

	"io.ki/prometheus-cve-exporter/config"
	"io.ki/prometheus-cve-exporter/internal/metrics"
	"io.ki/prometheus-cve-exporter/internal/models"
)

type PackageManager struct {
	Command string
	Args    []string
}

var packageManagers = []PackageManager{
	{"dpkg-query", []string{"-W", "-f", "${Package} ${Version}\n"}},
	{"pacman", []string{"-Q"}},
	{"rpm", []string{"-qa", "--qf", "%{NAME} %{VERSION}\n"}},
	{"apk", []string{"info", "-v"}},
}

func GetInstalledPackages() (map[string]string, error) {
	var cmd *exec.Cmd

	for _, pm := range packageManagers {
		if _, err := exec.LookPath(pm.Command); err == nil {
			cmd = exec.Command(pm.Command, pm.Args...)
			break
		}
	}

	if cmd == nil {
		return nil, fmt.Errorf("no suitable package manager found")
	}

	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("error executing package manager command: %w", err)
	}

	packages := make(map[string]string)
	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		parts := strings.Fields(line)
		if len(parts) >= 2 {
			packages[parts[0]] = parts[1]
		}
	}

	return packages, nil
}

func fetchNVDFeed() (*models.NVDFeed, error) {
	url := os.Getenv("NVD_JSON_GZ_FEED_URL")
	if url == "" {
		url = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz"
	}
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("error downloading NVD feed: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	gzReader, err := gzip.NewReader(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("error creating gzip reader: %v", err)
	}
	defer gzReader.Close()

	var feed models.NVDFeed
	decoder := json.NewDecoder(gzReader)
	if err := decoder.Decode(&feed); err != nil {
		return nil, fmt.Errorf("error decoding JSON: %v", err)
	}

	return &feed, nil
}

func checkVulnerabilities(packages map[string]string, feed *models.NVDFeed, severity []string) {
	metrics.ResetVulnerablePackagesGauge()
	totalVulnerabilities := 0

	for _, item := range feed.CVEItems {
		if item.Impact.BaseMetricV3 != nil {
			if contains(severity, item.Impact.BaseMetricV3.CVSSV3.BaseSeverity) {
				totalVulnerabilities += checkConfigurationNode(packages, item.CVE.CVEDataMeta.ID, item.Impact.BaseMetricV3.CVSSV3.BaseSeverity, item.Configurations.Nodes)
			}
		}
	}

	metrics.SetTotalVulnerabilities(float64(totalVulnerabilities))
	metrics.SetLastUpdateTime()
}

func checkConfigurationNode(packages map[string]string, cveID string, impact string, nodes []models.Node) int {
	vulnerableCount := 0
	for _, node := range nodes {
		for _, cpeMatch := range node.CPEMatch {
			if cpeMatch.Vulnerable {
				parts := strings.Split(cpeMatch.CPE23Uri, ":")
				if len(parts) > 4 {
					packageName := parts[4]
					if installedVersion, ok := packages[packageName]; ok {
						if isVersionVulnerable(installedVersion, cpeMatch) {
							metrics.UpdateVulnerablePackage(packageName, installedVersion, cveID, impact, 1)
							vulnerableCount++
						}
					}
				}
			}
		}
		vulnerableCount += checkConfigurationNode(packages, cveID, impact, node.Children)
	}
	return vulnerableCount
}

func isVersionVulnerable(installedVersion string, cpeMatch models.CPEMatch) bool {
	// This is a simplistic version check and should be improved
	if cpeMatch.VersionStartExcluding != "" && installedVersion <= cpeMatch.VersionStartExcluding {
		return false
	}
	if cpeMatch.VersionStartIncluding != "" && installedVersion < cpeMatch.VersionStartIncluding {
		return false
	}
	if cpeMatch.VersionEndExcluding != "" && installedVersion >= cpeMatch.VersionEndExcluding {
		return false
	}
	if cpeMatch.VersionEndIncluding != "" && installedVersion > cpeMatch.VersionEndIncluding {
		return false
	}
	return true
}

func UpdateMetrics(cfg *config.Config) {
	for {
		packages, err := GetInstalledPackages()
		if err != nil {
			log.Printf("Error getting installed packages: %v", err)
			log.Println("Waiting for 5m before next try.")
			time.Sleep(5 * time.Minute)
			continue
		}

		feed, err := fetchNVDFeed()
		if err != nil {
			log.Printf("Error fetching NVD feed: %v", err)
			log.Println("Waiting for 5m before next try.")
			time.Sleep(5 * time.Minute)
			continue
		}

		checkVulnerabilities(packages, feed, cfg.Severity)

		log.Println("Metrics updated successfully")
		log.Printf("Waiting for %v until next check.", cfg.UpdateInterval)
		time.Sleep(cfg.UpdateInterval)
	}
}

func contains(slice []string, item string) bool {
	for _, s := range slice {
		if s == item {
			return true
		}
	}
	return false
}
