package config

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"strings"
	"time"
)

const (
	defaultNVDFeedURL     = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz"
	defaultUpdateInterval = 24 * time.Hour
	defaultPort           = 10250
	defaultSeverity       = "CRITICAL"
)

type Config struct {
	NVDFeedURL     string        `json:"nvd_feed_url"`
	UpdateInterval time.Duration `json:"update_interval"`
	Port           int           `json:"port"`
	Severity       []string      `json:"severity"`
}

type configHelper struct {
	NVDFeedURL     string   `json:"nvd_feed_url"`
	UpdateInterval string   `json:"update_interval"`
	Port           int      `json:"port"`
	Severity       []string `json:"severity"`
}

func NewConfig() *Config {
	return &Config{
		NVDFeedURL:     defaultNVDFeedURL,
		UpdateInterval: defaultUpdateInterval,
		Port:           defaultPort,
		Severity:       []string{defaultSeverity},
	}
}

func Load() (*Config, error) {
	var configFile string
	flag.StringVar(&configFile, "config", "", "path to config file")

	cfg := NewConfig()
	flag.StringVar(&cfg.NVDFeedURL, "nvd-feed-url", defaultNVDFeedURL, "URL for the NVD feed")
	flag.DurationVar(&cfg.UpdateInterval, "update-interval", defaultUpdateInterval, "Update interval duration")
	flag.IntVar(&cfg.Port, "port", defaultPort, "Port to run the server on")

	var severity string
	flag.StringVar(&severity, "severity", defaultSeverity, "Comma separated list of minimum severity level for vulnerabilities")

	flag.Parse()

	cfg.Severity = parseSeverity(severity)

	if configFile != "" {
		if err := loadConfigFile(cfg, configFile); err != nil {
			return nil, fmt.Errorf("error loading config file: %w", err)
		}
	}

	cfg = overrideWithEnv(cfg)

	prettyPrintCfg(cfg)
	return cfg, nil
}

func loadConfigFile(cfg *Config, filename string) error {
	file, err := os.ReadFile(filename)
	if err != nil {
		return fmt.Errorf("error reading config file: %w", err)
	}

	var helper configHelper
	if err := json.Unmarshal(file, &helper); err != nil {
		return fmt.Errorf("error parsing config file: %w", err)
	}

	cfg.NVDFeedURL = helper.NVDFeedURL
	cfg.Port = helper.Port
	cfg.Severity = helper.Severity

	duration, err := time.ParseDuration(helper.UpdateInterval)
	if err != nil {
		return fmt.Errorf("error parsing update interval: %w", err)
	}
	cfg.UpdateInterval = duration

	return nil
}

func overrideWithEnv(cfg *Config) *Config {
	if value := os.Getenv("PCE_NVD_JSON_GZ_FEED_URL"); value != "" {
		cfg.NVDFeedURL = value
	}

	if value := os.Getenv("PCE_UPDATE_INTERVAL"); value != "" {
		if duration, err := time.ParseDuration(value); err == nil {
			cfg.UpdateInterval = duration
		} else {
			fmt.Printf("Warning: invalid PCE_UPDATE_INTERVAL, using current value: %v\n", cfg.UpdateInterval)
		}
	}

	if value := os.Getenv("PCE_PORT"); value != "" {
		if port, err := parseIntEnv(value); err == nil {
			cfg.Port = port
		} else {
			fmt.Printf("Warning: invalid PCE_PORT, using current value: %d\n", cfg.Port)
		}
	}

	if value := os.Getenv("PCE_SEVERITY"); value != "" {
		cfg.Severity = parseSeverity(value)
	}

	return cfg
}

func parseSeverity(severity string) []string {
	return strings.Split(severity, ",")
}

func parseIntEnv(value string) (int, error) {
	var result int
	_, err := fmt.Sscan(value, &result)
	return result, err
}

func prettyPrintCfg(cfg *Config) {
	fmt.Println("Current configuration:")
	fmt.Printf("    NVD Feed URL: %s\n", cfg.NVDFeedURL)
	fmt.Printf("    Update Interval: %s\n", cfg.UpdateInterval.String())
	fmt.Printf("    Minimum Severity: %v\n", cfg.Severity)
	fmt.Printf("    Port: %d\n", cfg.Port)
}
