package config

import (
	"os"
	"testing"
	"time"
)

func TestLoad(t *testing.T) {
	// Test default values
	cfg := NewConfig()

	if cfg.NVDFeedURL != defaultNVDFeedURL {
		t.Errorf("Expected NVDFeedURL to be %s, got %s", defaultNVDFeedURL, cfg.NVDFeedURL)
	}

	if cfg.UpdateInterval != defaultUpdateInterval {
		t.Errorf("Expected UpdateInterval to be %v, got %v", defaultUpdateInterval, cfg.UpdateInterval)
	}

	if cfg.Port != defaultPort {
		t.Errorf("Expected Port to be %d, got %d", defaultPort, cfg.Port)
	}

	if len(cfg.Severity) != 1 || cfg.Severity[0] != defaultSeverity {
		t.Errorf("Expected Severity to be [%s], got %v", defaultSeverity, cfg.Severity)
	}
}

func TestOverrideWithEnv(t *testing.T) {
	// Set environment variables
	os.Setenv("PCE_NVD_JSON_GZ_FEED_URL", "https://example.com/feed.json.gz")
	os.Setenv("PCE_UPDATE_INTERVAL", "12h")
	os.Setenv("PCE_PORT", "8080")
	os.Setenv("PCE_SEVERITY", "HIGH,MEDIUM")

	// Load configuration
	cfg := overrideWithEnv(NewConfig())

	// Check if environment variables override default values
	if cfg.NVDFeedURL != "https://example.com/feed.json.gz" {
		t.Errorf("Expected NVDFeedURL to be https://example.com/feed.json.gz, got %s", cfg.NVDFeedURL)
	}

	if cfg.UpdateInterval != 12*time.Hour {
		t.Errorf("Expected UpdateInterval to be 12h, got %v", cfg.UpdateInterval)
	}

	if cfg.Port != 8080 {
		t.Errorf("Expected Port to be 8080, got %d", cfg.Port)
	}

	expectedSeverity := []string{"HIGH", "MEDIUM"}
	if len(cfg.Severity) != len(expectedSeverity) || cfg.Severity[0] != expectedSeverity[0] || cfg.Severity[1] != expectedSeverity[1] {
		t.Errorf("Expected Severity to be %v, got %v", expectedSeverity, cfg.Severity)
	}

	// Clean up environment variables
	os.Unsetenv("PCE_NVD_JSON_GZ_FEED_URL")
	os.Unsetenv("PCE_UPDATE_INTERVAL")
	os.Unsetenv("PCE_PORT")
	os.Unsetenv("PCE_SEVERITY")
}
