package config

import (
	"os"
	"strings"
	"testing"
	"time"
)

func TestNewConfig(t *testing.T) {
	cfg := NewConfig()

	if cfg.NVDFeedURL != defaultNVDFeedURL {
		t.Errorf("Expected NVDFeedURL %s, got %s", defaultNVDFeedURL, cfg.NVDFeedURL)
	}
	if cfg.UpdateInterval != defaultUpdateInterval {
		t.Errorf("Expected UpdateInterval %v, got %v", defaultUpdateInterval, cfg.UpdateInterval)
	}
	if cfg.Port != defaultPort {
		t.Errorf("Expected Port %d, got %d", defaultPort, cfg.Port)
	}
	if len(cfg.Severity) != 1 || cfg.Severity[0] != defaultSeverity {
		t.Errorf("Expected Severity %v, got %v", []string{defaultSeverity}, cfg.Severity)
	}
	if cfg.PackageFile != "" {
		t.Errorf("Expected PackageFile to be empty, got %s", cfg.PackageFile)
	}
}

func TestLoadConfigFile(t *testing.T) {
	cfg := NewConfig()

	configContent := `{
		"nvd_feed_url": "https://example.com/feed.json",
		"update_interval": "48h",
		"port": 9090,
		"severity": ["HIGH", "MEDIUM", "low"],
		"package_file": "/tmp/package.txt"
	}`

	configFile := "/tmp/config.json"
	if err := os.WriteFile(configFile, []byte(configContent), 0644); err != nil {
		t.Fatalf("Error writing config file: %v", err)
	}
	defer os.Remove(configFile)

	if err := loadConfigFile(cfg, configFile); err != nil {
		t.Fatalf("Error loading config file: %v", err)
	}

	if cfg.NVDFeedURL != "https://example.com/feed.json" {
		t.Errorf("Expected NVDFeedURL https://example.com/feed.json, got %s", cfg.NVDFeedURL)
	}
	if cfg.UpdateInterval != 48*time.Hour {
		t.Errorf("Expected UpdateInterval 48h, got %v", cfg.UpdateInterval)
	}
	if cfg.Port != 9090 {
		t.Errorf("Expected Port 9090, got %d", cfg.Port)
	}
	expectedSeverity := []string{"HIGH", "MEDIUM", "LOW"}
	for i, s := range expectedSeverity {
		if cfg.Severity[i] != s {
			t.Errorf("Expected Severity %v, got %v", expectedSeverity, cfg.Severity)
		}
	}
	if cfg.PackageFile != "/tmp/package.txt" {
		t.Errorf("Expected PackageFile /tmp/package.txt, got %s", cfg.PackageFile)
	}
}

func TestOverrideWithEnv(t *testing.T) {
	cfg := NewConfig()

	os.Setenv("PCE_NVD_JSON_GZ_FEED_URL", "https://env.com/feed.json")
	os.Setenv("PCE_UPDATE_INTERVAL", "72h")
	os.Setenv("PCE_PORT", "8080")
	os.Setenv("PCE_SEVERITY", "LOW,INFO,critical")
	os.Setenv("PCE_PACKAGE_FILE", "/env/package.txt")
	os.Setenv("PCE_TLS_CERT", "/env/tls.crt")
	os.Setenv("PCE_TLS_KEY", "/env/tls.key")
	defer func() {
		os.Unsetenv("PCE_NVD_JSON_GZ_FEED_URL")
		os.Unsetenv("PCE_UPDATE_INTERVAL")
		os.Unsetenv("PCE_PORT")
		os.Unsetenv("PCE_SEVERITY")
		os.Unsetenv("PCE_PACKAGE_FILE")
		os.Unsetenv("PCE_TLS_CERT")
		os.Unsetenv("PCE_TLS_KEY")
	}()

	overrideWithEnv(cfg)

	if cfg.NVDFeedURL != "https://env.com/feed.json" {
		t.Errorf("Expected NVDFeedURL https://env.com/feed.json, got %s", cfg.NVDFeedURL)
	}
	if cfg.UpdateInterval != 72*time.Hour {
		t.Errorf("Expected UpdateInterval 72h, got %v", cfg.UpdateInterval)
	}
	if cfg.Port != 8080 {
		t.Errorf("Expected Port 8080, got %d", cfg.Port)
	}
	expectedSeverity := []string{"LOW", "INFO", "CRITICAL"}
	for i, s := range expectedSeverity {
		if cfg.Severity[i] != s {
			t.Errorf("Expected Severity %v, got %v", expectedSeverity, cfg.Severity)
		}
	}
	if cfg.PackageFile != "/env/package.txt" {
		t.Errorf("Expected PackageFile /env/package.txt, got %s", cfg.PackageFile)
	}
	if cfg.TLSCert != "/env/tls.crt" {
		t.Errorf("Expected TLSCert /env/tls.crt, got %s", cfg.TLSCert)
	}
	if cfg.TLSKey != "/env/tls.key" {
		t.Errorf("Expected TLSKey /env/tls.key, got %s", cfg.TLSKey)
	}
}

func TestParseSeverity(t *testing.T) {
	severity := "CRITICAL,HIGH,medium,LOW"
	expected := []string{"CRITICAL", "HIGH", "MEDIUM", "LOW"}
	result := parseSeverity(severity)

	for i, s := range expected {
		if result[i] != s {
			t.Errorf("Expected Severity %v, got %v", expected, result)
		}
	}
}

func TestParseIntEnv(t *testing.T) {
	value := "1024"
	expected := 1024
	result, err := parseIntEnv(value)
	if err != nil {
		t.Fatalf("Error parsing int env: %v", err)
	}
	if result != expected {
		t.Errorf("Expected %d, got %d", expected, result)
	}

	invalidValue := "invalid"
	_, err = parseIntEnv(invalidValue)
	if err == nil {
		t.Fatalf("Expected error for invalid int, got none")
	}
}

func TestParseBoolEnv(t *testing.T) {
	tests := []struct {
		name      string
		value     string
		expected  bool
		expectErr bool
	}{
		{
			name:      "valid true value",
			value:     "true",
			expected:  true,
			expectErr: false,
		},
		{
			name:      "valid false value",
			value:     "false",
			expected:  false,
			expectErr: false,
		},
		{
			name:      "invalid value",
			value:     "invalid",
			expected:  false,
			expectErr: false,
		},
		{
			name:      "numeric value",
			value:     "123",
			expected:  false,
			expectErr: false,
		},
		{
			name:      "yes value",
			value:     "yes",
			expected:  false,
			expectErr: false,
		},
		{
			name:      "no value",
			value:     "no",
			expected:  false,
			expectErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := parseBoolEnv(tt.value)

			if result != tt.expected {
				t.Errorf("parseBoolEnv(%q) = %v; want %v", tt.value, result, tt.expected)
			}
		})
	}
}

func TestValidateConfig(t *testing.T) {
	cfg := NewConfig()

	cfg.PackageFile = "/nonexistent/file"
	err := validateConfig(cfg)
	if err == nil {
		t.Errorf("Expected error for nonexistent package file, got none")
	}

	cfg.PackageFile = ""
	cfg.TLSCert = "/nonexistent/tls.crt"
	cfg.TLSKey = "/nonexistent/tls.key"
	err = validateConfig(cfg)
	if err == nil {
		t.Errorf("Expected error for missing TLS cert and key, got none")
	}

	cfg.TLSCert = ""
	cfg.TLSKey = ""
	err = validateConfig(cfg)
	if err != nil {
		t.Errorf("Expected no error for valid config, got %v", err)
	}
}

func TestPrettyfyCfg(t *testing.T) {
	cfg := NewConfig()
	cfg.NVDFeedURL = "https://example.com/feed.json"
	cfg.UpdateInterval = 48 * time.Hour
	cfg.Port = 9090
	cfg.Severity = []string{"HIGH", "MEDIUM"}
	cfg.PackageFile = "/tmp/package.txt"
	cfg.UseTLS = true
	cfg.TLSCert = "/tmp/tls.crt"
	cfg.TLSKey = "/tmp/tls.key"

	output := prettyfyCfg(cfg)
	expectedStrings := []string{
		"Current configuration:",
		"    NVD Feed URL: https://example.com/feed.json",
		"    Update Interval: 48h0m0s",
		"    Severity Levels: [HIGH MEDIUM]",
		"    Port: 9090",
		"    Package file: /tmp/package.txt",
		"    Use TLS: true",
		"    TLS Certificate: /tmp/tls.crt",
		"    TLS Key: /tmp/tls.key",
	}

	for _, expected := range expectedStrings {
		if !strings.Contains(output, expected) {
			t.Errorf("Expected output to contain %s", expected)
		}
	}
}

func TestLoad(t *testing.T) {
	// Ensure no flags are set during the test
	os.Args = []string{"cmd"}
	cfg, err := Load()
	if err != nil {
		t.Fatalf("Expected no error, got %v", err)
	}

	if cfg.NVDFeedURL != defaultNVDFeedURL {
		t.Errorf("Expected NVDFeedURL %s, got %s", defaultNVDFeedURL, cfg.NVDFeedURL)
	}
	if cfg.UpdateInterval != defaultUpdateInterval {
		t.Errorf("Expected UpdateInterval %v, got %v", defaultUpdateInterval, cfg.UpdateInterval)
	}
	if cfg.Port != defaultPort {
		t.Errorf("Expected Port %d, got %d", defaultPort, cfg.Port)
	}
	if len(cfg.Severity) != 1 || cfg.Severity[0] != defaultSeverity {
		t.Errorf("Expected Severity %v, got %v", []string{defaultSeverity}, cfg.Severity)
	}
	if cfg.PackageFile != "" {
		t.Errorf("Expected PackageFile to be empty, got %s", cfg.PackageFile)
	}
}
